1:"$Sreact.fragment"
2:I[6874,["6874","static/chunks/6874-6ca4feef1c5e2050.js","8974","static/chunks/app/page-42071eb7779b7d55.js"],""]
3:I[87555,[],""]
4:I[31295,[],""]
6:I[59665,[],"OutletBoundary"]
9:I[74911,[],"AsyncMetadataOutlet"]
b:I[59665,[],"ViewportBoundary"]
d:I[59665,[],"MetadataBoundary"]
f:I[26614,[],""]
:HL["/_next/static/css/88dadc3596b93c7c.css","style"]
:HL["/_next/static/css/ec6ab958af97b9c3.css","style"]
0:{"P":null,"b":"rleqL-q2GT-Z0JAucq8Qx","p":"","c":["","docs","YAML_SPEC"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","YAML_SPEC","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/88dadc3596b93c7c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e8ce0c","children":[["$","header",null,{"className":"bg-gray-800 text-white p-4 shadow-md","children":["$","nav",null,{"className":"container mx-auto flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"text-2xl font-bold","children":"Gil-Flow"}],["$","ul",null,{"className":"flex space-x-4","children":["$","li",null,{"children":[["$","$L2",null,{"href":"/docs","className":"hover:text-blue-400 transition-colors","children":"Docs"}],["$","$L2",null,{"href":"https://github.com/iyulab/gil","className":"hover:text-blue-400 transition-colors ml-4","children":"GitHub"}]]}]}]]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"bg-gray-800 text-white p-4 text-center text-sm mt-auto","children":["Â© ",2025," iyulab. All rights reserved."]}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","YAML_SPEC","oc"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec6ab958af97b9c3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":["$L7","$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","wzcwpeSghTYst7Fd0WH_Sv",{"children":[["$","$Lb",null,{"children":"$Lc"}],null]}],["$","$Ld",null,{"children":"$Le"}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[74911,[],"AsyncMetadata"]
13:I[52099,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
14:I[5278,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
e:["$","div",null,{"hidden":true,"children":["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]}]
15:T10b7,# Gil-Flow YAML Specification (v1.0)

**Gil-Flow YAML** is the standard for defining language-neutral, node-based workflows.

> **Note**: For a full overview, see [README.md](../README.md). For node specifications, see [NODE_SPEC.md](NODE_SPEC.md).

## Basic Structure

```yaml
version: "1.0"
name: "Workflow Name"
description: "A description of the workflow."

nodes:
  node_id:
    type: "NodeType"
    config: {}
    inputs: {}
    outputs: {}
    conditions: []

flow:
  - node_id
  - [parallel_1, parallel_2]

outputs:
  result: "@node_id.output"
```

## Required Fields

| Field       | Description                   | Example                |
|-------------|-------------------------------|------------------------|
| `version`   | The Gil-Flow standard version. | `"1.0"`                |
| `name`      | A unique identifier for the workflow. | `"Data Processing"`    |
| `nodes`     | The list of node definitions. | (See below)            |
| `flow`      | The execution order of the nodes. | `["step1", "step2"]`   |

## Node Definition

### Basic Structure
```yaml
node_id:
  type: "NodeType"               # Required: The type of the node.
  config: {}                     # Optional: Configuration for the node.
  inputs: {}                     # Optional: Input data for the node.
  outputs: {}                    # Optional: Output mapping for the node.
```

### Key Node Types
- **DataReadFile**: Reads a file.
- **DataTransform**: Transforms data.
- **OpenAIGenerateText**: Generates text using AI.
- **OpenAIGenerateImage**: Generates an image using AI.
- **GilConnectorOpenAI**: A connector for OpenAI.
- **ControlBranch**: Executes a branch based on a condition.
- **UtilLogMessage**: Logs a message.
- **UtilSetVariable**: Sets a variable.

## Reference System

### Environment Variables
```yaml
config:
  api_key: "${OPENAI_API_KEY}"   # Reference an environment variable.
```

### Node Outputs
```yaml
inputs:
  data: "@previous_node.output"  # Reference the output of a previous node.
```

### Context References
The context is used to pass data between nodes via the `Context` object. Values in the context can be referenced using the `${key}` syntax.

```yaml
inputs:
  user_id: "${user_data.id}"
  api_key: "${env.OPENAI_API_KEY}"
```

## Execution Flow

### Sequential Execution
```yaml
flow:
  - step1
  - step2
  - step3
```

### Parallel Execution
```yaml
flow:
  - init
  - [parallel_1, parallel_2, parallel_3]
  - merge
```

### Conditional Flow
```yaml
flow:
  - validator
  - condition:
      if: "@validator.is_valid"
      then: [process_valid]
      else: [handle_error]
```

## Output Definition

### Simple Output
```yaml
outputs:
  result: "@final_node.output"
```

### Composite Output
```yaml
outputs:
  processed_data: "@transform.output_data"
  status: "@validator.status"
```

## Advanced Features

### Retry Settings
```yaml
node_id:
  type: "CommAPI"
  retry:
    max_attempts: 3
    delay: 1000
    backoff: "exponential"
```

### Timeout Settings
```yaml
node_id:
  type: "AITextGen"
  timeout: 30000                 # 30 seconds
```

### Metadata (Optional)
```yaml
metadata:
  author: "Author Name"
  version: "1.0.0"
  tags: ["data", "ai"]
```

## Example Workflows

### Image Generation
```yaml
version: "1.0"
name: "AI Image Generation"

nodes:
  openai_connection:
    type: "GilConnectorOpenAI"
    config:
      api_key: "${OPENAI_API_KEY}"
  
  image_generator:
    type: "OpenAIGenerateImage"
    inputs:
      client: "@openai_connection.client"
      prompt: "A beautiful sunset"
      size: "1024x1024"

flow:
  - openai_connection
  - image_generator

outputs:
  image: "@image_generator.image_url"
```

### Data Pipeline
```yaml
version: "1.0"
name: "Data Processing Pipeline"

nodes:
  file_reader:
    type: "DataReadFile"
    inputs:
      file_path: "data.txt"
  
  data_transformer:
    type: "DataTransform"
    config:
      transform_expression: "data.upper()"
    inputs:
      input_data: "@file_reader.content"
  
  logger:
    type: "UtilLogMessage"
    inputs:
      input: "@data_transformer.output_data"

flow:
  - file_reader
  - data_transformer
  - logger

outputs:
  final_data: "@data_transformer.output_data"
```

---

*For detailed node interfaces, please see [NODE_SPEC.md](NODE_SPEC.md).*
5:["$","div",null,{"className":"flex h-screen","children":[["$","$L13",null,{"currentSlug":["YAML_SPEC"],"docTree":[{"name":"Overview","slug":["OVERVIEW"],"path":"D:\\data\\gil\\docs\\OVERVIEW.md","isFolder":false},{"name":"YAML Specification","slug":["YAML_SPEC"],"path":"D:\\data\\gil\\docs\\YAML_SPEC.md","isFolder":false},{"name":"Node Specification","slug":["NODE_SPEC"],"path":"D:\\data\\gil\\docs\\NODE_SPEC.md","isFolder":false},{"name":"Architecture","slug":["ARCHITECTURE"],"path":"D:\\data\\gil\\docs\\ARCHITECTURE.md","isFolder":false},{"name":"Development Guide","slug":["DEV"],"path":"D:\\data\\gil\\docs\\DEV.md","isFolder":false},{"name":"Context System","slug":["CONTEXT_SYSTEM"],"path":"D:\\data\\gil\\docs\\CONTEXT_SYSTEM.md","isFolder":false},{"name":"Nodes","slug":["nodes"],"path":"D:\\data\\gil\\docs\\nodes","isFolder":true,"children":[{"name":"Overview","slug":["nodes","README"],"path":"D:\\data\\gil\\docs\\nodes\\README.md","isFolder":false},{"name":"AITextGeneration","slug":["nodes","AITextGeneration"],"path":"D:\\data\\gil\\docs\\nodes\\AITextGeneration.md","isFolder":false},{"name":"ControlBranch","slug":["nodes","ControlBranch"],"path":"D:\\data\\gil\\docs\\nodes\\ControlBranch.md","isFolder":false},{"name":"DataReadFile","slug":["nodes","DataReadFile"],"path":"D:\\data\\gil\\docs\\nodes\\DataReadFile.md","isFolder":false},{"name":"GilConnectorOpenAI","slug":["nodes","GilConnectorOpenAI"],"path":"D:\\data\\gil\\docs\\nodes\\GilConnectorOpenAI.md","isFolder":false},{"name":"GilGenImage","slug":["nodes","GilGenImage"],"path":"D:\\data\\gil\\docs\\nodes\\GilGenImage.md","isFolder":false},{"name":"TransformData","slug":["nodes","TransformData"],"path":"D:\\data\\gil\\docs\\nodes\\TransformData.md","isFolder":false},{"name":"UtilLogMessage","slug":["nodes","UtilLogMessage"],"path":"D:\\data\\gil\\docs\\nodes\\UtilLogMessage.md","isFolder":false},{"name":"UtilSetVariable","slug":["nodes","UtilSetVariable"],"path":"D:\\data\\gil\\docs\\nodes\\UtilSetVariable.md","isFolder":false}]}]}],["$","div",null,{"className":"flex-1 overflow-y-auto p-8 prose dark:prose-invert","children":["$","$L14",null,{"htmlContent":"$15"}]}]]}]
8:null
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
a:{"metadata":[["$","title","0",{"children":"Gil-Flow"}],["$","meta","1",{"name":"description","content":"A powerful workflow automation engine."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$a:metadata","error":null,"digest":"$undefined"}
