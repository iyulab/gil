1:"$Sreact.fragment"
2:I[6874,["6874","static/chunks/6874-6ca4feef1c5e2050.js","8974","static/chunks/app/page-42071eb7779b7d55.js"],""]
3:I[87555,[],""]
4:I[31295,[],""]
6:I[59665,[],"OutletBoundary"]
9:I[74911,[],"AsyncMetadataOutlet"]
b:I[59665,[],"ViewportBoundary"]
d:I[59665,[],"MetadataBoundary"]
f:I[26614,[],""]
:HL["/_next/static/css/88dadc3596b93c7c.css","style"]
:HL["/_next/static/css/ec6ab958af97b9c3.css","style"]
0:{"P":null,"b":"rleqL-q2GT-Z0JAucq8Qx","p":"","c":["","docs","CONTEXT_SYSTEM"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","CONTEXT_SYSTEM","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/88dadc3596b93c7c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e8ce0c","children":[["$","header",null,{"className":"bg-gray-800 text-white p-4 shadow-md","children":["$","nav",null,{"className":"container mx-auto flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"text-2xl font-bold","children":"Gil-Flow"}],["$","ul",null,{"className":"flex space-x-4","children":["$","li",null,{"children":[["$","$L2",null,{"href":"/docs","className":"hover:text-blue-400 transition-colors","children":"Docs"}],["$","$L2",null,{"href":"https://github.com/iyulab/gil","className":"hover:text-blue-400 transition-colors ml-4","children":"GitHub"}]]}]}]]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"bg-gray-800 text-white p-4 text-center text-sm mt-auto","children":["© ",2025," iyulab. All rights reserved."]}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","CONTEXT_SYSTEM","oc"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec6ab958af97b9c3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":["$L7","$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","hxEnbfjJRzKpzRbGZc3Ojv",{"children":[["$","$Lb",null,{"children":"$Lc"}],null]}],["$","$Ld",null,{"children":"$Le"}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[74911,[],"AsyncMetadata"]
13:I[52099,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
14:I[5278,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
e:["$","div",null,{"hidden":true,"children":["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]}]
15:Ta10,# Gil-Flow 컨텍스트 시스템

Gil-Flow에서는 워크플로우 실행 중 상태와 정보를 관리하기 위한 컨텍스트 시스템을 제공합니다.

## 📊 컨텍스트 (Context)

**Context**는 워크플로우 실행 중에 노드 간에 데이터를 전달하고 참조를 해결하는 데 사용되는 간단한 키-값 저장소입니다.

### 구조
```python
class Context:
    def __init__(self, initial_data: Dict[str, Any] = None):
        self._data = initial_data if initial_data is not None else {}

    def to_dict(self) -> Dict[str, Any]:
        return self._data

    def get(self, key: str, default: Any = None) -> Any:
        return self._data.get(key, default)

    def set(self, key: str, value: Any):
        self._data[key] = value

    def resolve_reference(self, value: Any) -> Any:
        if isinstance(value, str) and value.startswith("$"):
            key = value[1:]
            return self.get(key, value)  # Return original value if not found
        return value
```

### 주요 기능
- **데이터 저장**: 워크플로우 실행 중 필요한 모든 데이터를 저장합니다.
- **참조 해결**: `${variable_name}` 형식의 문자열 참조를 실제 값으로 해결합니다.

### 접근 방법
```yaml
# YAML에서 접근
inputs:
  user_id: "${user_data.id}"
  api_key: "${env.OPENAI_API_KEY}"
```

## 🔄 컨텍스트 상호작용

노드는 `execute` 메서드의 `context` 인수를 통해 컨텍스트에 액세스하고 수정할 수 있습니다.

```python
async def execute(self, data: dict, context: Context) -> dict:
    # 컨텍스트에서 값 가져오기
    api_key = context.get("env.OPENAI_API_KEY")

    # 컨텍스트에 값 설정
    context.set("processed_count", 10)

    # 참조 해결
    resolved_prompt = context.resolve_reference("${user_input.prompt}")
```

## 📊 컨텍스트 라이프사이클

1.  **초기화**: 워크플로우 시작 시 `GilWorkflow`에 의해 생성됩니다.
2.  **데이터 주입**: 워크플로우 YAML의 `environment` 섹션 또는 `run` 메서드의 `inputs`를 통해 초기 데이터가 주입될 수 있습니다.
3.  **노드 실행**: 각 노드는 `execute` 메서드를 통해 컨텍스트에 액세스하고 수정할 수 있습니다.
4.  **종료**: 워크플로우 완료 시 최종 컨텍스트 상태를 포함하는 결과가 반환될 수 있습니다.

이 컨텍스트 시스템을 통해 Gil-Flow는 복잡한 워크플로우에서도 상태를 체계적으로 관리하고, 노드 간 안전한 데이터 공유를 지원합니다.5:["$","div",null,{"className":"flex h-screen","children":[["$","$L13",null,{"currentSlug":["CONTEXT_SYSTEM"],"docTree":[{"name":"Overview","slug":["OVERVIEW"],"path":"D:\\data\\gil\\docs\\OVERVIEW.md","isFolder":false},{"name":"YAML Specification","slug":["YAML_SPEC"],"path":"D:\\data\\gil\\docs\\YAML_SPEC.md","isFolder":false},{"name":"Node Specification","slug":["NODE_SPEC"],"path":"D:\\data\\gil\\docs\\NODE_SPEC.md","isFolder":false},{"name":"Architecture","slug":["ARCHITECTURE"],"path":"D:\\data\\gil\\docs\\ARCHITECTURE.md","isFolder":false},{"name":"Development Guide","slug":["DEV"],"path":"D:\\data\\gil\\docs\\DEV.md","isFolder":false},{"name":"Context System","slug":["CONTEXT_SYSTEM"],"path":"D:\\data\\gil\\docs\\CONTEXT_SYSTEM.md","isFolder":false},{"name":"Nodes","slug":["nodes"],"path":"D:\\data\\gil\\docs\\nodes","isFolder":true,"children":[{"name":"Overview","slug":["nodes","README"],"path":"D:\\data\\gil\\docs\\nodes\\README.md","isFolder":false},{"name":"AITextGeneration","slug":["nodes","AITextGeneration"],"path":"D:\\data\\gil\\docs\\nodes\\AITextGeneration.md","isFolder":false},{"name":"ControlBranch","slug":["nodes","ControlBranch"],"path":"D:\\data\\gil\\docs\\nodes\\ControlBranch.md","isFolder":false},{"name":"DataReadFile","slug":["nodes","DataReadFile"],"path":"D:\\data\\gil\\docs\\nodes\\DataReadFile.md","isFolder":false},{"name":"GilConnectorOpenAI","slug":["nodes","GilConnectorOpenAI"],"path":"D:\\data\\gil\\docs\\nodes\\GilConnectorOpenAI.md","isFolder":false},{"name":"GilGenImage","slug":["nodes","GilGenImage"],"path":"D:\\data\\gil\\docs\\nodes\\GilGenImage.md","isFolder":false},{"name":"TransformData","slug":["nodes","TransformData"],"path":"D:\\data\\gil\\docs\\nodes\\TransformData.md","isFolder":false},{"name":"UtilLogMessage","slug":["nodes","UtilLogMessage"],"path":"D:\\data\\gil\\docs\\nodes\\UtilLogMessage.md","isFolder":false},{"name":"UtilSetVariable","slug":["nodes","UtilSetVariable"],"path":"D:\\data\\gil\\docs\\nodes\\UtilSetVariable.md","isFolder":false}]}]}],["$","div",null,{"className":"flex-1 overflow-y-auto p-8 prose dark:prose-invert","children":["$","$L14",null,{"htmlContent":"$15"}]}]]}]
8:null
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
a:{"metadata":[["$","title","0",{"children":"Gil-Flow"}],["$","meta","1",{"name":"description","content":"A powerful workflow automation engine."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$a:metadata","error":null,"digest":"$undefined"}
