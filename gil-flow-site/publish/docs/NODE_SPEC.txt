1:"$Sreact.fragment"
2:I[6874,["6874","static/chunks/6874-6ca4feef1c5e2050.js","8974","static/chunks/app/page-42071eb7779b7d55.js"],""]
3:I[87555,[],""]
4:I[31295,[],""]
6:I[59665,[],"OutletBoundary"]
9:I[74911,[],"AsyncMetadataOutlet"]
b:I[59665,[],"ViewportBoundary"]
d:I[59665,[],"MetadataBoundary"]
f:I[26614,[],""]
:HL["/_next/static/css/88dadc3596b93c7c.css","style"]
:HL["/_next/static/css/ec6ab958af97b9c3.css","style"]
0:{"P":null,"b":"rleqL-q2GT-Z0JAucq8Qx","p":"","c":["","docs","NODE_SPEC"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","NODE_SPEC","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/88dadc3596b93c7c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e8ce0c","children":[["$","header",null,{"className":"bg-gray-800 text-white p-4 shadow-md","children":["$","nav",null,{"className":"container mx-auto flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"text-2xl font-bold","children":"Gil-Flow"}],["$","ul",null,{"className":"flex space-x-4","children":["$","li",null,{"children":[["$","$L2",null,{"href":"/docs","className":"hover:text-blue-400 transition-colors","children":"Docs"}],["$","$L2",null,{"href":"https://github.com/iyulab/gil","className":"hover:text-blue-400 transition-colors ml-4","children":"GitHub"}]]}]}]]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"bg-gray-800 text-white p-4 text-center text-sm mt-auto","children":["© ",2025," iyulab. All rights reserved."]}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","NODE_SPEC","oc"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec6ab958af97b9c3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":["$L7","$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","OhOtTXYUGeo_uSdVwV5sJv",{"children":[["$","$Lb",null,{"children":"$Lc"}],null]}],["$","$Ld",null,{"children":"$Le"}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[74911,[],"AsyncMetadata"]
13:I[52099,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
14:I[5278,["6249","static/chunks/cb15b0f3-2afaac53bf45f539.js","6874","static/chunks/6874-6ca4feef1c5e2050.js","6822","static/chunks/6822-2958c995e5aaa32a.js","7870","static/chunks/app/docs/%5B%5B...slug%5D%5D/page-8ea8e9f2adedb049.js"],"default"]
e:["$","div",null,{"hidden":true,"children":["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]}]
15:T109c,# Gil-Flow 노드 타입 표준 (v1.0)

모든 구현체 공통 노드 사양을 정의합니다.

> **참고**: YAML 문법은 [YAML_SPEC.md](YAML_SPEC.md), 아키텍처는 [ARCHITECTURE.md](ARCHITECTURE.md) 참조

## 노드 인터페이스 표준

### 기본 구조
```yaml
node_name:
  type: "NodeType"
  config: {}
  inputs: {}
  timeout: 30000
```

### 출력 형식
```json
{
  "success": true,
  "data": {},
  "metadata": {
    "execution_time": 100,
    "node_type": "NodeType"
  },
  "error": null
}
```

## 표준 노드 타입

### 데이터 노드

#### DataReadFile
파일 읽기
```yaml
file_reader:
  type: "DataReadFile"
  inputs:
    file_path: "data.txt"
```

**출력**: `content` (파일 내용)

#### DataDatabase
데이터베이스 연동
```yaml
db_query:
  type: "DataDatabase"
  config:
    connection_string: "${DB_URL}"
  inputs:
    query: "SELECT * FROM users"
```

**출력**: `rows` (쿼리 결과), `count` (행 수)

### 변환 노드

#### DataTransform
데이터 변환
```yaml
transformer:
  type: "DataTransform"
  config:
    transform_expression: "data * 2" # Python 표현식
  inputs:
    input_data: "@source.result"
```

**출력**: `output_data` (변환된 데이터)

#### TransformTemplate
템플릿 처리
```yaml
template:
  type: "TransformTemplate"
  inputs:
    template: "Hello {{name}}"
    data: { "name": "World" }
    engine: "jinja2"
```

**출력**: `result` (렌더링된 텍스트)

### AI 노드

#### OpenAIGenerateText
텍스트 생성
```yaml
text_gen:
  type: "OpenAIGenerateText"
  config:
    # 이 노드에는 특정 설정이 없습니다.
  inputs:
    client: "@openai_connector.client"
    prompt: "요약해주세요: {{content}}"
    model: "gpt-3.5-turbo"
```

**출력**: `generated_text` (생성된 텍스트)

#### OpenAIGenerateImage
이미지 생성
```yaml
image_gen:
  type: "OpenAIGenerateImage"
  config:
    model: "dall-e-3"
    size: "1024x1024"
    quality: "standard"
  inputs:
    client: "@openai_connector.client"
    prompt: "아름다운 풍경"
```

**출력**: `image_url` (이미지 URL)

### 유틸리티 노드

#### UtilSetVariable
워크플로우 컨텍스트에 변수 설정
```yaml
set_my_var:
  type: "UtilSetVariable"
  config:
    variable_name: "my_variable"
  inputs:
    value: "Hello from variable!"
```

**출력**: 없음 (컨텍스트를 수정함)

### 제어 노드

#### ControlBranch
조건부 실행
```yaml
branch_node:
  type: "ControlBranch"
  inputs:
    condition: "@validator.is_valid"
    input: "@data_source.output"
```

**출력**: `true_output` (조건이 참일 때 데이터), `false_output` (조건이 거짓일 때 데이터)

## 커넥터 노드

### GilConnectorOpenAI
OpenAI API 연결
```yaml
openai_connector:
  type: "GilConnectorOpenAI"
  config:
    api_key: "${OPENAI_API_KEY}"
    organization: "${OPENAI_ORG}"
    base_url: "https://api.openai.com/v1"
```

**출력**: `client` (초기화된 OpenAI 클라이언트 인스턴스)

### GilConnectorDatabase
데이터베이스 연결
```yaml
db_conn:
  type: "GilConnectorDatabase"
  config:
    type: "postgresql"
    host: "localhost"
    database: "mydb"
    username: "${DB_USER}"
    password: "${DB_PASS}"
```

**출력**: `connected` (연결 상태), `info` (데이터베이스 정보)

## 공통 설정

### 재시도 설정
```yaml
node_name:
  type: "NodeType"
  retry:
    max_attempts: 3
    delay: 1000
    backoff: "exponential"    # linear, exponential
```

### 타임아웃 설정
```yaml
node_name:
  type: "NodeType"
  timeout: 30000              # 밀리초
```

### 조건부 실행
```yaml
node_name:
  type: "NodeType"
  conditions:
    - "@previous.success == true"
    - "@data.count > 0"
```

## 에러 처리

### 에러 형식
```json
{
  "success": false,
  "data": null,
  "error": {
    "code": "INVALID_INPUT",
    "message": "입력 데이터가 유효하지 않습니다",
    "details": { "field": "required" }
  }
}
```

### 표준 에러 코드
- `INVALID_INPUT`: 입력 데이터 오류
- `CONNECTION_ERROR`: 연결 실패
- `TIMEOUT`: 타임아웃 
- `API_ERROR`: API 호출 실패
- `INTERNAL_ERROR`: 내부 오류

---

*각 노드의 상세 구현 가이드는 [docs/nodes/](nodes/) 디렉토리를 참조하세요.*
5:["$","div",null,{"className":"flex h-screen","children":[["$","$L13",null,{"currentSlug":["NODE_SPEC"],"docTree":[{"name":"Overview","slug":["OVERVIEW"],"path":"D:\\data\\gil\\docs\\OVERVIEW.md","isFolder":false},{"name":"YAML Specification","slug":["YAML_SPEC"],"path":"D:\\data\\gil\\docs\\YAML_SPEC.md","isFolder":false},{"name":"Node Specification","slug":["NODE_SPEC"],"path":"D:\\data\\gil\\docs\\NODE_SPEC.md","isFolder":false},{"name":"Architecture","slug":["ARCHITECTURE"],"path":"D:\\data\\gil\\docs\\ARCHITECTURE.md","isFolder":false},{"name":"Development Guide","slug":["DEV"],"path":"D:\\data\\gil\\docs\\DEV.md","isFolder":false},{"name":"Context System","slug":["CONTEXT_SYSTEM"],"path":"D:\\data\\gil\\docs\\CONTEXT_SYSTEM.md","isFolder":false},{"name":"Nodes","slug":["nodes"],"path":"D:\\data\\gil\\docs\\nodes","isFolder":true,"children":[{"name":"Overview","slug":["nodes","README"],"path":"D:\\data\\gil\\docs\\nodes\\README.md","isFolder":false},{"name":"AITextGeneration","slug":["nodes","AITextGeneration"],"path":"D:\\data\\gil\\docs\\nodes\\AITextGeneration.md","isFolder":false},{"name":"ControlBranch","slug":["nodes","ControlBranch"],"path":"D:\\data\\gil\\docs\\nodes\\ControlBranch.md","isFolder":false},{"name":"DataReadFile","slug":["nodes","DataReadFile"],"path":"D:\\data\\gil\\docs\\nodes\\DataReadFile.md","isFolder":false},{"name":"GilConnectorOpenAI","slug":["nodes","GilConnectorOpenAI"],"path":"D:\\data\\gil\\docs\\nodes\\GilConnectorOpenAI.md","isFolder":false},{"name":"GilGenImage","slug":["nodes","GilGenImage"],"path":"D:\\data\\gil\\docs\\nodes\\GilGenImage.md","isFolder":false},{"name":"TransformData","slug":["nodes","TransformData"],"path":"D:\\data\\gil\\docs\\nodes\\TransformData.md","isFolder":false},{"name":"UtilLogMessage","slug":["nodes","UtilLogMessage"],"path":"D:\\data\\gil\\docs\\nodes\\UtilLogMessage.md","isFolder":false},{"name":"UtilSetVariable","slug":["nodes","UtilSetVariable"],"path":"D:\\data\\gil\\docs\\nodes\\UtilSetVariable.md","isFolder":false}]}]}],["$","div",null,{"className":"flex-1 overflow-y-auto p-8 prose dark:prose-invert","children":["$","$L14",null,{"htmlContent":"$15"}]}]]}]
8:null
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
a:{"metadata":[["$","title","0",{"children":"Gil-Flow"}],["$","meta","1",{"name":"description","content":"A powerful workflow automation engine."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$a:metadata","error":null,"digest":"$undefined"}
